#include <iostream>
#include <string>
#include <vector>
#include <cmath>

using namespace std;

// Function declarations for functions in other files
void processData(const string& data);
void calculateMetrics(const vector<double>& values);
void displayResults(const string& title, const vector<string>& results);

// Functions in this file
void validateInput(const string& input) {
    cout << "File1: Validating input: " << input << endl;
    
    if (input.empty()) {
        cout << "File1: Input validation failed - empty string" << endl;
        return;
    }
    
    if (input.length() < 3) {
        cout << "File1: Input validation failed - too short" << endl;
        return;
    }
    
    cout << "File1: Input validation passed" << endl;
    
    // Call function from file2
    processData(input);
}

void performCalculations(double a, double b, double c) {
    cout << "File1: Performing calculations with values: " << a << ", " << b << ", " << c << endl;
    
    vector<double> values = {a, b, c};
    
    // Calculate some basic operations
    double sum = a + b + c;
    double product = a * b * c;
    double average = sum / 3.0;
    
    cout << "File1: Sum = " << sum << ", Product = " << product << ", Average = " << average << endl;
    
    // Call function from file2
    calculateMetrics(values);
}

void generateReport(const string& reportType) {
    cout << "File1: Generating " << reportType << " report" << endl;
    
    vector<string> reportData;
    reportData.push_back("Report Type: " + reportType);
    reportData.push_back("Generated by: File1");
    reportData.push_back("Status: Complete");
    
    // Call function from file3
    displayResults("File1 Report", reportData);
}

void analyzeData(const vector<int>& data) {
    cout << "File1: Analyzing data with " << data.size() << " elements" << endl;
    
    if (data.empty()) {
        cout << "File1: No data to analyze" << endl;
        return;
    }
    
    int min = data[0], max = data[0], sum = 0;
    
    for (int value : data) {
        if (value < min) min = value;
        if (value > max) max = value;
        sum += value;
    }
    
    double average = static_cast<double>(sum) / data.size();
    
    cout << "File1: Analysis results - Min: " << min << ", Max: " << max << ", Average: " << average << endl;
    
    // Convert to double vector and call file2 function
    vector<double> doubleData(data.begin(), data.end());
    calculateMetrics(doubleData);
}

// Main function for file1
int main() {
    cout << "=== File1 Main Function ===" << endl;
    
    // Test validateInput function
    cout << "\n1. Testing validateInput:" << endl;
    validateInput("test data");
    validateInput("");
    validateInput("ab");
    
    // Test performCalculations function
    cout << "\n2. Testing performCalculations:" << endl;
    performCalculations(10.5, 20.3, 15.7);
    performCalculations(1.0, 2.0, 3.0);
    
    // Test generateReport function
    cout << "\n3. Testing generateReport:" << endl;
    generateReport("Monthly");
    generateReport("Annual");
    
    // Test analyzeData function
    cout << "\n4. Testing analyzeData:" << endl;
    vector<int> testData = {10, 25, 15, 30, 5, 20};
    analyzeData(testData);
    analyzeData({});
    
    cout << "\n=== File1 Main Function Completed ===" << endl;
    return 0;
}